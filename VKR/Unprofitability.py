import os
import numpy as np
import pandas as pd
import re #регулярны
from datetime import datetime

class Unprofitability():
    error = ''

    def __init__(self, folder):
        self.folder = folder

    def form(self):
        if ('Убыточность.csv' not in os.listdir(self.folder)):
            self.error = f'В директории не хватает файлов: Убыточность.csv'
            raise Exception

        filename= self.folder + '/Убыточность.csv'
        df_una = pd.read_csv(filename, delimiter=';', encoding='1251', low_memory=False)

        columns = df_una.columns.tolist()
        required_col = ['Сумма начисленной премии руб', 'Сумма начисленной комиссии руб', 'Заработанная премия', 'Заработанная комиссия',
                        'Сумма заявленных убытков', 'Сумма урегулированных убытков', 'Выплаты по неустойкам', 'Сумма убытка или ЗНУ',
                        'Сумма убытка или ЗНУ без неустоек', 'ДВОУ', 'Расходы на урегулирование убытков', 'Расходы на урегулирование убытков (ОФР 25203)',
                        'Сумма начисления по регрессу', 'Сумма поступления по регрессу', 'Год изготовления', 'Номер полиса', 'Дата договора',
                        'Дата начала ответственности', 'Дата окончания ответственности', 'Дата начисления премии']

        if (sorted(list(set(required_col))) != sorted(list(set(required_col) & set(columns)))):
            differences = list(set(required_col) - set(columns))
            append_or_crush = ", ".join(str(element) for element in differences)
            self.error = f'В таблице Убыточность не хватает столбцов:\n{append_or_crush}'
            raise Exception

        num_column = ['Сумма начисленной премии руб', 'Сумма начисленной комиссии руб', 'Сумма расторжения',
        'Заработанная премия', 'Заработанная комиссия', 'Сумма заявленных убытков', 'Сумма урегулированных убытков',
        'Выплаты по неустойкам', 'Сумма убытка или ЗНУ', 'Сумма убытка или ЗНУ без неустоек', 'ДВОУ',
        'Расходы на урегулирование убытков', 'Расходы на урегулирование убытков (ОФР 25203)',
        'Сумма начисления по регрессу', 'Сумма поступления по регрессу', 'Год изготовления', 'Доля действия договора']

        #удалить пробелы и преобразовать в числа
        for columns in num_column:
            df_una[columns] = df_una[columns].replace(r'\s+','',regex=True).replace(r'\,','.',regex=True)
            df_una[columns] = df_una[columns].apply(pd.to_numeric)

        def type_of_policy(row):
            if (re.fullmatch(r'ХХХ.*', row['Номер полиса'])):
               value =  'Электронный'
            else:
                value =  'Бумага'
            return value

        #добавить столбец и заполнить его на основе ф-ии
        df_una.insert(2, 'Бумага/электронный', df_una.apply(type_of_policy, axis = 1))

        #преобразовать в даты
        date_column = ['Дата договора', 'Дата начала ответственности', 'Дата окончания ответственности','Дата начисления премии']
        for columns in date_column:
            df_una[columns] = df_una[columns].apply(lambda x: datetime.strptime(x,'%d.%m.%Y'))


        def conclusion_date(row):
            value = row.strftime('%Y') + '_' + row.strftime('%m')
            return value
        df_una.insert(4, 'Год_месяц заключения', df_una['Дата договора'].apply(conclusion_date))

        max_date = df_una['Дата начисления премии'].max()
        df_una.insert(14, 'Плавающий год', np.where(df_una['Дата начисления премии']>=(max_date - pd.Timedelta(days=365)), 1, ''))
        df_una.insert(15, 'Период', df_una['Дата начисления премии'].dt.year)
        df_una.insert(30, 'Заработанное ДВОУ', np.where(df_una['ДВОУ'] is not None, (df_una['ДВОУ'] * df_una['Доля действия договора']), 0))


        table_pivot = pd.pivot_table(df_una[df_una['Плавающий год'] == '1'],
                                     index=["Филиал"],
                                     columns=[],
                                     values=['Сумма убытка или ЗНУ без неустоек', 'Заработанная премия', 'Сумма расторжения', 'Сумма начисленной премии руб',
                                                    'Кол-во страховых случаев', 'Кол-во отказов', 'Доля действия договора', 'ДВОУ', 'Сумма начисленной комиссии руб',
                                                    'Заработанная комиссия', 'Заработанное ДВОУ', 'Расходы на урегулирование убытков', 'Расходы на урегулирование убытков (ОФР 25203)',
                                                    'Сумма поступления по регрессу', 'ID договора', 'Сумма урегулированных убытков', 'Кол-во урегулированных убытков'],
                                     aggfunc={'Сумма убытка или ЗНУ без неустоек': pd.Series.sum,
                                                     'Заработанная премия': pd.Series.sum,
                                                     'Сумма расторжения': pd.Series.sum,
                                                     'ID договора': pd.Series.nunique,
                                                     'Кол-во урегулированных убытков': pd.Series.sum,
                                                     'Сумма урегулированных убытков': pd.Series.sum,
                                                     'Сумма начисленной премии руб': pd.Series.sum,
                                                     'Кол-во страховых случаев': pd.Series.sum,
                                                     'Кол-во отказов': pd.Series.sum,
                                                     'Доля действия договора': pd.Series.mean,
                                                     'ДВОУ': pd.Series.sum,
                                                     'Сумма начисленной комиссии руб': pd.Series.sum,
                                                     'Заработанная комиссия': pd.Series.sum,
                                                     'Заработанное ДВОУ': pd.Series.sum,
                                                     'Расходы на урегулирование убытков': pd.Series.sum,
                                                     'Расходы на урегулирование убытков (ОФР 25203)': pd.Series.sum,
                                                     'Сумма поступления по регрессу': pd.Series.sum},
                                     fill_value=0).reset_index()

        df_branch = pd.DataFrame(columns=['Филиалы', 'Коэффициет выплат к зсп, %', 'Частота убытков, %', 'Средняя выплата, руб.', 'Средняя премия, руб.', 'Начисленная премия, руб.', 'Заработанная премия, руб.', 'Возвраты, руб.', 'Количество договоров страхования', 'Убыток или ЗНУ, руб.', 'Количество страховых случаев', 'Сумма урегулированных убытков, руб.', 'Начисленное КВ+ДВОУ, руб.', 'Заработанное КВ+ДВОУ, руб.', 'РУУ', 'Поступления по регрессам'])
        df_branch['Филиалы'] = table_pivot['Филиал']
        df_branch['Коэффициет выплат к зсп, %'] = table_pivot['Сумма убытка или ЗНУ без неустоек'] / (table_pivot['Заработанная премия'] - table_pivot['Сумма расторжения']) * 100
        df_branch['Частота убытков, %'] = (table_pivot['Кол-во страховых случаев'] - table_pivot['Кол-во отказов']) / table_pivot['Доля действия договора'] * 100
        df_branch['Средняя выплата, руб.'] = (table_pivot['Сумма урегулированных убытков'] / table_pivot['Кол-во урегулированных убытков']) #if table_pivot['Кол-во урегулированных убытков'] != 0 else 0
        df_branch['Средняя премия, руб.'] = (table_pivot['Сумма начисленной премии руб'] / table_pivot['ID договора'])
        df_branch['Начисленная премия, руб.'] = (table_pivot['Сумма начисленной премии руб'])
        df_branch['Заработанная премия, руб.'] = (table_pivot['Заработанная премия'])
        df_branch['Возвраты, руб.'] = (table_pivot['Сумма расторжения'])
        df_branch['Количество договоров страхования'] = table_pivot['ID договора']
        df_branch['Убыток или ЗНУ, руб.'] = (table_pivot['Сумма убытка или ЗНУ без неустоек'])
        df_branch['Количество страховых случаев'] = table_pivot['Кол-во страховых случаев']
        df_branch['Начисленное КВ+ДВОУ, руб.'] = (table_pivot['Сумма начисленной комиссии руб'] + table_pivot['ДВОУ'])
        df_branch['Заработанное КВ+ДВОУ, руб.'] = (table_pivot['Заработанная комиссия'] + table_pivot['Заработанное ДВОУ'])
        df_branch['РУУ'] = (table_pivot['Расходы на урегулирование убытков'] + table_pivot['Расходы на урегулирование убытков (ОФР 25203)'])
        df_branch['Поступления по регрессам'] = (table_pivot['Сумма поступления по регрессу'])

        df_una["Агент"] = df_una["Агент"] if df_una["Агент"] is not None else 'Прямые продажи'
        table_pivot = pd.pivot_table(df_una[df_una['Плавающий год'] == '1'],
                                     index=["Агент"],
                                     columns=[],
                                     values=['Сумма убытка или ЗНУ без неустоек', 'Заработанная премия',
                                             'Сумма расторжения', 'Сумма начисленной премии руб',
                                             'Кол-во страховых случаев', 'Кол-во отказов', 'Доля действия договора',
                                             'ДВОУ', 'Сумма начисленной комиссии руб',
                                             'Заработанная комиссия', 'Заработанное ДВОУ',
                                             'Расходы на урегулирование убытков',
                                             'Расходы на урегулирование убытков (ОФР 25203)',
                                             'Сумма поступления по регрессу', 'ID договора',
                                             'Сумма урегулированных убытков', 'Кол-во урегулированных убытков'],
                                     aggfunc={'Сумма убытка или ЗНУ без неустоек': pd.Series.sum,
                                              'Заработанная премия': pd.Series.sum,
                                              'Сумма расторжения': pd.Series.sum,
                                              'ID договора': pd.Series.nunique,
                                              'Кол-во урегулированных убытков': pd.Series.sum,
                                              'Сумма урегулированных убытков': pd.Series.sum,
                                              'Сумма начисленной премии руб': pd.Series.sum,
                                              'Кол-во страховых случаев': pd.Series.sum,
                                              'Кол-во отказов': pd.Series.sum,
                                              'Доля действия договора': pd.Series.mean,
                                              'ДВОУ': pd.Series.sum,
                                              'Сумма начисленной комиссии руб': pd.Series.sum,
                                              'Заработанная комиссия': pd.Series.sum,
                                              'Заработанное ДВОУ': pd.Series.sum,
                                              'Расходы на урегулирование убытков': pd.Series.sum,
                                              'Расходы на урегулирование убытков (ОФР 25203)': pd.Series.sum,
                                              'Сумма поступления по регрессу': pd.Series.sum},
                                     fill_value=0).reset_index()
        df_agent = pd.DataFrame(
            columns=['Агенты', 'Коэффициет выплат к зсп, %', 'Частота убытков, %', 'Средняя выплата, руб.',
                     'Средняя премия, руб.', 'Начисленная премия, руб.', 'Заработанная премия, руб.', 'Возвраты, руб.',
                     'Количество договоров страхования', 'Убыток или ЗНУ, руб.', 'Количество страховых случаев',
                     'Сумма урегулированных убытков, руб.', 'Начисленное КВ+ДВОУ, руб.', 'Заработанное КВ+ДВОУ, руб.',
                     'РУУ', 'Поступления по регрессам'])
        df_agent['Агенты'] = table_pivot['Агент']
        df_agent['Коэффициет выплат к зсп, %'] = table_pivot['Сумма убытка или ЗНУ без неустоек'] / (
                    table_pivot['Заработанная премия'] - table_pivot['Сумма расторжения']) * 100
        df_agent['Частота убытков, %'] = (table_pivot['Кол-во страховых случаев'] - table_pivot['Кол-во отказов']) / \
                                          table_pivot['Доля действия договора'] * 100
        df_agent['Средняя выплата, руб.'] = (table_pivot['Сумма урегулированных убытков'] / table_pivot[
            'Кол-во урегулированных убытков'])  # if table_pivot['Кол-во урегулированных убытков'] != 0 else 0
        df_agent['Средняя премия, руб.'] = (table_pivot['Сумма начисленной премии руб'] / table_pivot['ID договора'])
        df_agent['Начисленная премия, руб.'] = (table_pivot['Сумма начисленной премии руб'])
        df_agent['Заработанная премия, руб.'] = (table_pivot['Заработанная премия'])
        df_agent['Возвраты, руб.'] = (table_pivot['Сумма расторжения'])
        df_agent['Количество договоров страхования'] = table_pivot['ID договора']
        df_agent['Убыток или ЗНУ, руб.'] = (table_pivot['Сумма убытка или ЗНУ без неустоек'])
        df_agent['Количество страховых случаев'] = table_pivot['Кол-во страховых случаев']
        df_agent['Начисленное КВ+ДВОУ, руб.'] = (table_pivot['Сумма начисленной комиссии руб'] + table_pivot['ДВОУ'])
        df_agent['Заработанное КВ+ДВОУ, руб.'] = (
                    table_pivot['Заработанная комиссия'] + table_pivot['Заработанное ДВОУ'])
        df_agent['РУУ'] = (table_pivot['Расходы на урегулирование убытков'] + table_pivot[
            'Расходы на урегулирование убытков (ОФР 25203)'])
        df_agent['Поступления по регрессам'] = (table_pivot['Сумма поступления по регрессу'])

        with pd.ExcelWriter(
                '!Убыточность.xlsx',
                engine="xlsxwriter",
                mode='w') as excel_writer:

            df_una.to_excel(excel_writer, index=False, freeze_panes=(1, 0), sheet_name='Данные')
            df_branch.to_excel(excel_writer, index=False, sheet_name='Убыточность Филиалы')
            df_agent.to_excel(excel_writer, index=False, freeze_panes=(1, 0), sheet_name='Убыточность Агенты')


        import subprocess
        subprocess.call('!Убыточность.xlsx', shell=True)

